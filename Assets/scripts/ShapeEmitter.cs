using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class ShapeEmitter : MonoBehaviour {

	// array to hold the cubes generated by the mesh
	private List<ObjectParticle> objectParticles;
	// a list to hold the indices of objects that need to be destroyed
	private List<int> destructionList;

	// a variable to reference the Cardboard camera
	public GameObject globalCardboardObject;

	// a variable to reference the main camera
	public GameObject mainCamera;

	// a variable to reference the event system
	public GameObject eventSys;

	//holds the amount of starting geometry
	public int startCount;

	private WebCamTexture mCamera;

	private Vector3 particleOrigin, particleDestination, particleTrajectory, particleOriginNormal;

	private float timer = 2.0f;


	void Start () {

		// grab the webCam material from the event system
		mCamera = eventSys.GetComponent<WebCamSrc>().camTexture;

		startCount = 2;

		objectParticles = new List<ObjectParticle>();
		destructionList = new List<int> ();

		// get the origin of the particle emitter
		particleOrigin = new Vector3 (transform.position.x, transform.position.y, transform.position.z);

		// used to calculate the velocity vector
		particleDestination = new Vector3 (mainCamera.transform.position.x, mainCamera.transform.position.y, mainCamera.transform.position.z);
		particleTrajectory = particleOrigin-particleDestination;

		// find the cross-product (normal) of that vector and the 'up' vector, normalize it
		// this produces a vector that is 90 degrees from the trajectory vector on the XY plane
		particleOriginNormal = Vector3.Normalize(Vector3.Cross (particleTrajectory, Vector3.up));

		// start by creating two cubes 
		for (int i=1; i<startCount; i++) {

			// modify the origin by adding the normal vector with a magnitude;
			Vector3 origin = particleOrigin + (i*1.0f*particleOriginNormal);
			Vector3 mirroredOrigin = particleOrigin - (i*1.0f*particleOriginNormal);

			// create the object particles
			ObjectParticle objPart = new ObjectParticle(origin, particleTrajectory, 1000.0f);
			ObjectParticle mirObjPart = new ObjectParticle(mirroredOrigin, particleTrajectory, 1000.0f);

			// set the mainTexture as the webCamMaterial
			objPart.geometry.GetComponent<Renderer>().material.mainTexture = mCamera;
			mirObjPart.geometry.GetComponent<Renderer>().material.mainTexture = mCamera;

			// add the particles to the objectParticles list
			objectParticles.Add (objPart);
			objectParticles.Add (mirObjPart);
		}


	}
	
	// Update is called once per frame
	void Update () {

		foreach (ObjectParticle obj in objectParticles) {

			obj.update ();
			obj.display ();
			if (obj.isDead () ) {
				// add that objects index to a list
				int index = objectParticles.IndexOf (obj);
				print (index);
				destructionList.Add (index);
			}
			
		}

		timer -= Time.deltaTime;

		if (timer <= 0) {
			Generate ();
			Debug.Log ("First timer has finished!");
			timer = 2.0f;
		}
		
		//		StartCoroutine(Generate());
	
//		foreach (int index in destructionList) {
//			// destroy the object
//			Destroy(objectParticles[index].geometry);
//			// remove the object from the list
//			objectParticles.RemoveAt(index);
//		}
	}

	void Generate() {

		// modify the origin by adding the normal vector with a magnitude;
		Vector3 origin = particleOrigin + (1.0f*particleOriginNormal);
		Vector3 mirroredOrigin = particleOrigin - (1.0f*particleOriginNormal);
		
		// create the object particles
		ObjectParticle objPart = new ObjectParticle(origin, particleTrajectory, 1000.0f);
		ObjectParticle mirObjPart = new ObjectParticle(mirroredOrigin, particleTrajectory, 1000.0f);
		
		// set the mainTexture as the webCamMaterial
		objPart.geometry.GetComponent<Renderer>().material.mainTexture = mCamera;
		mirObjPart.geometry.GetComponent<Renderer>().material.mainTexture = mCamera;
		
		// add the particles to the objectParticles list
		objectParticles.Add (objPart);
		objectParticles.Add (mirObjPart);

//		Debug.Log ("ballz");

//		yield return new WaitForSeconds(25.0f);

	}

	// =========== PARTICLE CLASS ============
	public class ObjectParticle {
		
		public Vector3 location, velocity;
		public float lifespan;
		public float angle, aVelocity;
		public GameObject geometry;
		
		// constructor
		public ObjectParticle(Vector3 l, Vector3 v, float span){
			location = l;
			lifespan = span;
			velocity = v;

			// get the vector toward the camera
			velocity = Vector3.Normalize(velocity)*(-.03f);
			geometry = GameObject.CreatePrimitive(PrimitiveType.Cube);
			geometry.transform.position = location;
		}
		
		public void display(){
			geometry.transform.position = location;
		}

		public bool isDead(){
			if (lifespan < 0) {
				return true;
			} else {
				return false;
			}
		}
		
		public void update(){
			location = location + velocity;
			lifespan -= 2.0f;
//			print (lifespan);
		}
	}

}